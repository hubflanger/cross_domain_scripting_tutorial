package {	import flash.display.*;	import flash.net.*;	import flash.events.*;	import flash.system.*;	public class DomainA extends MovieClip	{		private static const PACKAGE:String = "com.hubflanger.crossdomain.";							public function DomainA()		{			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener( Event.INIT, initHandler );			loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler );        	loader.contentLoaderInfo.addEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler );        	addChild(loader);        	        	/**			 * To import domainB.swf's classes into domainA.swf's application domain at runtime,			 * we use a LoaderContext object when issuing the request to load domainB.swf.			 * This makes domainB.swf's classes directly accessible to domainA.swf.			 */        	var loaderContext:LoaderContext = new LoaderContext( false, ApplicationDomain.currentDomain );			loaderContext.applicationDomain =  ApplicationDomain.currentDomain;			loader.load( new URLRequest( "http://sub.hubflanger.com/crossdomain/domainB.swf" ), loaderContext );		}				private function initHandler( evt:Event ):void		{			var appDomain:ApplicationDomain = evt.target.applicationDomain;						/**			 * cast the loader's content into a domainB type			 */			var domainBRef:Class = appDomain.getDefinition( PACKAGE + "DomainB" )  as  Class;			var domainB:Object = domainBRef( evt.target.content );			domainB.sayHello( "Hello World!" );						/**			 * retrieve the constructor of the class you want to instantiate by calling			 * applicationDomain.getDefinition() of the loader's applicationDomain			 */			var innerClipRef:Class = appDomain.getDefinition( PACKAGE + "InnerClip" )  as  Class;			// create an instance of InnerClip			var innerClip:Object = new innerClipRef();			innerClip.sayInnerHello( "Inner clip says Hello!" );			addChild( innerClip as MovieClip );					}				private function ioErrorHandler( e:IOErrorEvent ):void 		{        	trace( e.text );	    }		    private function securityErrorHandler( e:SecurityErrorEvent ):void 	    {	        trace( e.text );	    }	}}